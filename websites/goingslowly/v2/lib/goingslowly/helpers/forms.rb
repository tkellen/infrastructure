require 'net/http'

module GS
  module Helpers

    ##
    # Prepare request params for google.com/recaptcha.
    #
    # @return [Hash]
    # @option return [String] :remoteip
    #   The ip of the user.
    # @option return [String] :challenge
    #   The challenge field.
    # @option return [String] :response
    #   The response field.
    #
    def recaptchaContext(params)
      {
        :remoteip  => params['ip'],
        :challenge => params['recaptcha_challenge_field'],
        :response  => params['recaptcha_response_field']
      }
    end

    ##
    # Validate captcha attempt with google.com/recaptcha.
    #
    # @param [Hash] params
    #   A hash containing recaptcha attempt.
    # @option options [String] ip
    #   IP address of client attempting to answer captcha.
    # @option options [String] recaptcha_challenge_field
    #   Challenge field generated by google.com/recaptcha.
    # @option options [String] recaptcha_response_field
    #   Response field containing recaptcha answer.
    #
    # @return [Boolean]
    #   True if captcha matched, false if not.
    #
    def recaptchaCorrect?(params)
      opts = recaptchaContext(params)
      opts[:privatekey] = AUTH['recaptcha']['private_key']
      recaptcha = Net::HTTP.post_form(URI.parse('http://www.google.com/recaptcha/api/verify'),opts)
      answer, error = recaptcha.body.split.map { |s| s.chomp }
      unless answer == 'true'
        return false
      else
        return true
      end
    end

    ##
    # Prepare JSON error response to form submission.  The contents
    # of this are handled by the site's javascript.
    #
    # @param [err] Hash
    #   A hash from Sequel::Model containing validation errors.
    #
    # @return [JSON]
    #   Response for handling.
    #
    def formError(err={})
      {:errors=>err,:error_message=>CONFIG['messages']['error_submission']}.to_json
    end

    ##
    # Redirect to another page.
    #
    # @param [url] String
    #   The URL to redirect to.
    #
    # @return [JSON]
    #   Response for handling.
    #
    def formRedirect(url)
      {:redirect=>url}.to_json
    end

    ##
    # Prepare JSON success response to form submission.  The contents
    # of this are handled by the site's javascript.
    #
    # @param [String] message
    #   The message to display.
    #
    # @return [JSON]
    #   Response for handling.
    #
    def formSuccess(message=nil?)
      {:thankyou=>message||CONFIG['messages']['thankyou']}.to_json
    end

  end
end
